import { MaterialDefinition } from "./Material";

/**
 * A 2D layer.
 */
export interface Layer {
  /**
   * The oder of the layer. A layer with a higher order overlays a layer with a
   * lower order.
   *
   * Should start at `0`.
   */
  order: number;
  /**
   * The name of the material of the layer (e.g., "print_diffuse") or a complete material definition
   */
  material: MaterialDefinition;
  /**
   * Whether or not the layer is visible.
   *
   * Defaults to `false`.
   */
  visible?: boolean;
  /**
   * The texture of the layer, either a url or a blob.
   *
   * For non PNG images the file format must be specified:
   * - in the URL itself
   * - via a TextureUrl and TextureUrlCollection object
   */
  texture?: string | TextureUrl | Blob | TextureBlob;
  /**
   * Whether or not the layer is overprinted with the texture.
   *
   * Defaults to `false`.
   */
  overprintContent?: boolean;
  /**
   * Either the spot color or the tint color, depending on the material used.
   *
   * The color is in HEX format with alpha (e.g., #FF0000FF).
   */
  overprintColor?: string;
  /**
   * Overprint mode. Can be either "tint" (for tintable foils) or "opaque" (for
   * spot colors)
   */
  overprintMode?: "tint" | "opaque";
  /**
   * Whether or not the layer is a cut layer.
   *
   * The cut layer is not rendered by the engine.
   *
   * Defaults to `false`.
   */
  cut?: boolean;
  /**
   * Whether or not the layer is a fold layer.
   *
   * The fold layer is not rendered by the engine.
   *
   * Defaults to `false`.
   */
  fold?: boolean;
  /**
   * A pattern embossing that is applied to the layer.
   */
  patternEmbossing?: PatternEmbossingConfiguration;
}

export interface PatternEmbossingConfiguration {
  /**
   * I don't know.
   */
  overrides?: TextureOverride<unknown>[];
  /**
   * The offset of the embossing.
   */
  offset?: [number, number];
  /**
   * The rotation of the embossing.
   */
  rotation?: number;
}

export interface TextureUrl {
  /**
   * The public url of the texture
   */
  url: string;
  /**
   * Define the file extension of the texture. (e.g. ".png", ".jpg", ".basis")
   *
   * This is only necessary, if the url does not contain the extension itself
   */
  fileExtension?: string;
}
export interface TextureBlob {
  /**
   * The texture itself as an Blob
   */
  blob: Blob;
  /**
   * Define the file extension of the texture (e.g. ".png", ".jpg", ".ktx2")
   *
   * This is only necessary, if the blob is not a common image file (.png, .jpg)
   */
  fileExtension?: string;
}

export type TextureOverride<T> = Record<
  string,
  Partial<T> | Record<string, Partial<T>>
>;

type Texture = unknown;

export function isTextureBlob(obj: unknown): obj is TextureBlob {
  return typeof obj === "object" && obj !== null && "blob" in obj;
}

export function isTextureUrl(obj: unknown): obj is TextureUrl {
  return typeof obj === "object" && obj !== null && "url" in obj;
}
