import { ToEngineMessage } from "../post-messages";

/**
 * Set the geometry.
 */
export interface SetGeometryMessage extends ToEngineMessage<"set-geometry"> {
  payload: {
    /**
     * The BLOB or URL of the geometry (i.e., the 3D model, for example a box or a
     * bottle) in the GLTF/GLB format.
     */
    model: string | Blob;
    config: {
      /**
       * Sets the default scale of the geometry.
       */
      defaultScale: [number, number, number];
      /**
       * Whether or not the geometry should automatically scale with the mappings
       * defined by the SetStageMappingsMessage.
       *
       * When `true`, the `axes` field of the stages should be set.
       */
      scaleWithMapping: boolean;
      /**
       * Whether or not the cutout texture from SetCutoutTextureMessage should be
       * used.
       */
      useCutoutTexture?: boolean;
      /**
       * A list with stages.
       *
       * A stage is an area on the geometry that a texture can be drawn on.
       */
      stages: {
        /**
         * The name of the stage is the key.
         */
        [stageName: string]: {
          /**
           * The display name of the stage. Does not need to match the name of the
           * key.
           */
          // TODO: Maybe better call it displayName to make this distinction clear?
          name: string;
          /**
           * The normal vector of the stage. This can for example be used to
           * automatically rotate the geometry to face this stage.
           *
           * Example: `[0, 0, 1]`
           */
          // TODO: Remove.
          normalVector: [number, number, number];
          /**
           * Not neccessary anymore must must still be send.
           */
          // TODO: Remove
          tris: [];
          /**
           * The UV color of the stage.
           *
           * The UV color marks the area on the texture that the stage is drawn
           * on. The array are normalized RGB colors (i.e., in the range from 0 to
           * 1).
           *
           * Example: `[0.21586, 1, 0.21586]`
           */
          uvColor: [number, number, number];
          /**
           * Maps the 2 axes of the 2D stage to the axes of the 3D geometry.
           *
           * Only relevant when `scaleWithMapping` is `true`.
           *
           * The number is the number of the axis (i.e., `0` for the x-axis, `1`
           * for the y-axis, and `2` for the z-axis).
           *
           * Example: `[0, 1]` maps the width and height of the stage to the x and
           * y-axis of the geometry.
           *
           */
          axes?: [number, number];
        };
      };
      /**
       * Overrides object use to alter properties of the geometry such as material parameters.
       * Not necessary but usually used to alter the look of static objects in the geometry.
       */
      overrides?: Array<{
        target: string[];
        data: Record<string, unknown> | Record<string, unknown>[];
      }>;
    };
  };
}
