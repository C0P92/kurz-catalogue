import { DcController } from "../DcController.js";
import { PcmEnvironment } from "../pcm/environment.js";
/**
 * The id of the environment.
 */
export type EnvironmentId = string;
export type Environment = EnvironmentId | PcmEnvironment | File | {
    /**
     * A url to the environment file.
     *
     * Supports all file formats that are supported by BabylonJS. For faster
     * loading, it is highly recommended to use BabylonJS's own format
     * (either DDS or ENV).
     */
    url: string;
} | {
    /**
     * The data as a blob.
     *
     * Supports all file formats that are supported by BabylonJS. For faster
     * loading, it is highly recommended to use BabylonJS's own format
     * (either DDS or ENV).
     */
    blob: Blob;
};
export interface EnvironmentOptions {
    /**
     * The exposure of the environment.
     */
    exposure?: number;
    /**
     * The default rotation of the environment in radians.
     */
    defaultRotation?: number;
}
/**
 * Sets the environment.
 *
 * @param dcController The DcController object obtained from the init function.
 * @param environment The environment to set.
 * @param options The options for the environment.
 * @returns A promise that resolves when the environment has been set.
 */
export declare const setEnvironment: typeof _setEnvironment;
export declare function _setEnvironment(dcController: DcController, environment: Environment, options?: EnvironmentOptions): Promise<void>;
/**
 * Sets whether or not the environment is visible.
 *
 * When the environment is not visible, you don't see it directly as the
 * background but it still appears in the reflections and is responsible for
 * the lighting.
 *
 * By default, the environment is visible.
 *
 * @param dcController The DcController object obtained from the init function.
 * @param visible Whether or not the environment should be visible.
 * @returns A promise that resolves when the visibility has been set.
 */
export declare function setEnvironmentVisibility(dcController: DcController, visible: boolean): Promise<void>;
