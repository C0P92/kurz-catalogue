export function on(dcController, eventName, callback) {
    // Be carful when you modify or add a event!
    // Typescript can`t yet narrow down generic parameters: https://github.com/microsoft/TypeScript/issues/33014
    // Therefore you will not get any typechecks for the callback parameter as well as for the override definition!
    if (eventName === "key-down-event") {
        return dcController.addListener("key-down-event", (message) => {
            callback({ domEventInitiator: message.payload });
        });
    }
    else if (eventName === "key-up-event") {
        return dcController.addListener("key-up-event", (message) => {
            callback({ domEventInitiator: message.payload });
        });
    }
    else if (eventName === "load") {
        return dcController.onLoad(() => callback({}));
    }
    else if (eventName === "unload") {
        return dcController.onUnload(() => callback({}));
    }
    else if (eventName === "ready") {
        return dcController.addListener("engine-ready", () => callback({}));
    }
    else if (eventName === "camera-position-change") {
        return dcController.addListener("camera-position-change", (message) => callback({ position: message.payload }));
    }
    else if (eventName === "environment-rotation-change") {
        return dcController.addListener("environment-rotation-change", (message) => callback({ rotation: message.payload }));
    }
    else if (eventName === "geometry-transform-change") {
        return dcController.addListener("geometry-transform-change", (message) => callback({ transform: message.payload }));
    }
    throw new Error("Unknown event name: " + eventName);
}
