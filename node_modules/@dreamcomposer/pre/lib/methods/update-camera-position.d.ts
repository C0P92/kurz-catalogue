import { DcController } from "../DcController.js";
export interface CameraPosition {
    /**
     * 3D world position where the camera is anchored and focused on.
     */
    target: [number, number, number];
    /**
     * The camera pitch/latitude angle in degree.
     *
     * The value defines the rotation around the local x-axis of the camera. Since
     * the camera is always focused on the target point this is equal to the latitude
     * coordinate around the target
     *
     * Example:
     * 0° = top view |
     * 90° = frontal view |
     * 180° = bottom view
     */
    pitch: number;
    /**
     * The camera yaw/longitude angle in degree.
     *
     * The value defines the local rotation of the camera around the world y-axis. Since
     * the camera is always focused on the target point this is equal to the longitude
     * coordinate around the target
     *
     * Example:
     * 0° = front view |
     * 90° = right view |
     * 180° = back view |
     * 270° = left view
     *
     */
    yaw: number;
    /**
     * Defines the distance/radius of the camera to the target position in meters
     */
    distance: number;
}
/**
 * Rotates and moves the camera position to the desired value.
 *
 * @param dcController The DcController object obtained from the init function.
 * @param changes Target values of the camera position. Values that are `undefined` will be ignored.
 * @param transitionDuration Animation duration in seconds. Default is `0`
 * @returns A promise that resolves when the camera position has been updated.
 */
export declare function updateCameraPosition(dcController: DcController, changes: Partial<CameraPosition>, transitionDuration?: number): Promise<void>;
