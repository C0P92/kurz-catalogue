import { load } from "./load.js";
function isPreviewRenderOptions(options) {
    return options.render !== undefined;
}
/**
 * Sets a preview that is shown when the viewer is not loaded.
 *
 * @param dcController The DcController object obtained from the init function.
 */
export function setPreview(dcController, options) {
    const previewRenderer = isPreviewRenderOptions(options)
        ? () => options.render(dcController.iFrameContainer)
        : () => renderStyledPreview(dcController, options);
    dcController.setPreviewRenderer(previewRenderer);
}
/**
 * Renders a pre-styled preview.
 */
function renderStyledPreview(dcController, options) {
    const container = dcController.iFrameContainer;
    const placeholderImageSrc = options.placeholderImageSrc;
    container.innerHTML = `
        <div class="dc-preview">
            <button>
                <div>
                    <!-- Icon from https://heroicons.com/, licensed under the MIT license -->
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z" />
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>    
                    <span>Click to Load</span>
                </div>
                <div${placeholderImageSrc
        ? ` style="background-image: url('${placeholderImageSrc}');"`
        : ""}></div>
            </button>
        </div>
    `;
    container
        .querySelector("button")
        .addEventListener("click", () => load(dcController));
}
