import { DcController } from "../DcController.js";
export type SkeletonState = {
    /**
     * The name of the skeleton from the mesh.
     */
    skeletonName: string;
    /**
     * A list of states for all bones inside the skeleton.
     *
     * If a state for a specific bone is not set, the resting information is used.
     */
    boneStates?: BoneState[];
};
export type BoneState = {
    /**
     * The index of the bone inside the skeleton.
     */
    index: number;
    /**
     * Local position of the bone.
     *
     * If empty the position of the resting pose is used.
     */
    localPosition?: [number, number, number];
    /**
     * The local rotation of the bone in euler angles or as an angle axis representation.
     *
     * If empty the rotation of the resting pose is used.
     */
    localRotation?: EulerAngles | AngleAxisRotation;
};
export interface EulerAngles {
    x: number;
    y: number;
    z: number;
}
export interface AngleAxisRotation {
    /** Normalized rotation axis */
    axis: [number, number, number];
    /** Angle in Radians */
    angle: number;
}
/**
 * Sets the state of all skeletons.
 *
 * @param dcController The DcController object obtained from the init function.
 * @param states An array with skeleton states.
 * @returns A promise that resolves when the skeleton have been updated.
 */
export declare function setSkeletonStates(dcController: DcController, states: SkeletonState[]): Promise<void>;
