import { ensureCallOrder } from "../util/ensure-call-order.js";
import { getEnvironmentById, isPcmEnvironment, } from "../pcm/environment.js";
/**
 * Sets the environment.
 *
 * @param dcController The DcController object obtained from the init function.
 * @param environment The environment to set.
 * @param options The options for the environment.
 * @returns A promise that resolves when the environment has been set.
 */
export const setEnvironment = ensureCallOrder(_setEnvironment);
export async function _setEnvironment(dcController, environment, options = {}) {
    var _a, _b, _c, _d;
    const payload = {};
    if (typeof environment === "string" || typeof environment === "number") {
        const pcmEnvironment = await getEnvironmentById(environment, dcController.accessToken, dcController.baseUrl.pcm);
        if (!pcmEnvironment) {
            throw new Error(`Cannot find environment with id ${environment}`);
        }
        environment = pcmEnvironment;
    }
    if (isPcmEnvironment(environment)) {
        payload.filenameHDR = environment.url;
        payload.exposureHDR = (_a = options.exposure) !== null && _a !== void 0 ? _a : environment.exposure;
        payload.defaultRotation =
            (_b = options.defaultRotation) !== null && _b !== void 0 ? _b : environment.defaultRotation;
    }
    else if (typeof environment === "object") {
        const url = environment.url;
        const blob = environment.blob;
        if (url) {
            payload.filenameHDR = url;
        }
        else if (blob) {
            payload.blobHDR = blob;
        }
        payload.exposureHDR = (_c = options.exposure) !== null && _c !== void 0 ? _c : 1;
        payload.defaultRotation = (_d = options.defaultRotation) !== null && _d !== void 0 ? _d : 0;
    }
    return dcController.postMessage({
        channel: "set-environment",
        payload,
    });
}
/**
 * Sets whether or not the environment is visible.
 *
 * When the environment is not visible, you don't see it directly as the
 * background but it still appears in the reflections and is responsible for
 * the lighting.
 *
 * By default, the environment is visible.
 *
 * @param dcController The DcController object obtained from the init function.
 * @param visible Whether or not the environment should be visible.
 * @returns A promise that resolves when the visibility has been set.
 */
export function setEnvironmentVisibility(dcController, visible) {
    return dcController.postMessage({
        channel: "set-environment-visible",
        payload: visible,
    });
}
