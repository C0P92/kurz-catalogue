/**
 * A map with all render functions and their state for each DcController
 * instance.
 */
const loadingScreenRenderer = new Map();
/**
 * Sets a loading screen that is displayed while the engine is loading.
 *
 * @param dcController The DcController object obtained from the init function.
 * @param render A render function that renders the preview into the given div
 *               container. May return a function that is called to unmount the
 *               loading screen (e.g., when a smooth transition is wanted). If
 *               no function is returned, the loading screen will be unmounted
 *               automatically by clearing the innerHTML of the container.
 */
export function setLoadingScreen(dcController, render) {
    if (loadingScreenRenderer.has(dcController)) {
        const options = loadingScreenRenderer.get(dcController);
        options.renderFunction = render;
        if (options.isActive) {
            options.unmountFunction(dcController.loadingUiContainer);
            options.renderFunction(dcController.loadingUiContainer);
        }
        return;
    }
    loadingScreenRenderer.set(dcController, {
        renderFunction: render,
        isActive: false,
        unmountFunction: (container) => (container.innerHTML = ""),
    });
    if (dcController.isLoaded() && !dcController.engineReady) {
        show(dcController);
    }
    dcController.onLoad(() => show(dcController));
    dcController.addListener("display-loading-ui", () => show(dcController));
    dcController.addListener("hide-loading-ui", () => hide(dcController));
    dcController.onUnload(() => hide(dcController));
}
/**
 * Shows the loading screen.
 *
 * @param dcController The DcController object obtained from the init function.
 */
function show(dcController) {
    const options = loadingScreenRenderer.get(dcController);
    if (options.isActive) {
        return;
    }
    options.isActive = true;
    const unmountFunction = options.renderFunction(dcController.loadingUiContainer);
    if (typeof unmountFunction === "function") {
        options.unmountFunction = unmountFunction;
    }
    else {
        options.unmountFunction = (container) => (container.innerHTML = "");
    }
}
/**
 * Hides the loading screen.
 *
 * @param dcController The DcController object obtained from the init function.
 */
function hide(dcController) {
    const options = loadingScreenRenderer.get(dcController);
    if (!options.isActive) {
        return;
    }
    options.isActive = false;
    options.unmountFunction(dcController.loadingUiContainer);
}
