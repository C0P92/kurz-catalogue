/**
 * Rotates and moves the camera position to the desired value.
 *
 * @param dcController The DcController object obtained from the init function.
 * @param changes Target values of the geometry transform. Values that are `undefined` will be ignored.
 * @param transitionDuration Animation duration in seconds. Default is `0`
 * @returns A promise that resolves when the geometry transform has been updated.
 */
export function updateGeometryTransform(dcController, changes, transitionDuration) {
    return dcController.postMessage({
        channel: "update-geometry-transform",
        payload: { changes: changes, transitionDuration: transitionDuration },
    }, {
        memorize: false,
    });
}
/**
 * Defines the initial geometry rotation and position.
 *
 * The initial transform is used if the transform is reseted.
 *
 * @param dcController The DcController object obtained from the init function.
 * @param transform Initial values of the geometry transform.
 * @param applyTransform If set to true the transform will also be applied directly.
 * @returns A promise that resolves when the initial geometry transform has been set. Default is `false`
 */
export function setInitialGeometryTransform(dcController, transform) {
    return dcController.postMessage({
        channel: "set-initial-geometry-transform",
        payload: { transform: transform },
    }, {
        memorize: false,
    });
}
/**
 * Sets the geometry rotation and position to the initial transform values.
 *
 * If no initial transform was defined `{position: [0,0,0], rotation: [0,0,0]}`
 * is used
 *
 * @param dcController The DcController object obtained from the init function.
 * @param transitionDuration Animation duration in seconds. Default is `0`
 * @returns A promise that resolves when the geometry transform has been updated.
 */
export function resetGeometryTransform(dcController, transitionDuration) {
    return dcController.postMessage({
        channel: "reset-geometry-transform",
        payload: { transitionDuration: transitionDuration },
    }, {
        memorize: false,
    });
}
/**
 * Sets the geometry position so its lowest part is placed perfectly on the ground
 *
 * If no initial transform was defined `{position: [0,0,0], rotation: [0,0,0]}`
 * is used
 *
 * @param dcController The DcController object obtained from the init function.
 * @param transitionDuration Animation duration in seconds. Default is `0`
 * @returns A promise that resolves when the geometry transform has been updated.
 */
export function placeGeometryOnGround(dcController, transitionDuration) {
    return dcController.postMessage({
        channel: "place-geometry-on-ground",
        payload: { transitionDuration: transitionDuration },
    }, {
        memorize: false,
    });
}
