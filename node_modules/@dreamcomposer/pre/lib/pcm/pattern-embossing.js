import { getAccessToken } from "../methods/access-token.js";
import { getPcmBaseUrl } from "../methods/base-url.js";
import { isPcmItem, mapNativePcmItemToPcmItem, } from "./item.js";
import { _getPcmItem, _getPcmItems } from "./util.js";
/**
 * Checks if the given object is a PcmPatternEmbossing.
 *
 * @param obj The object to check.
 * @returns True if the object is a PcmPatternEmbossing, false otherwise.
 */
export function isPcmPatternEmbossing(obj) {
    return (isPcmItem(obj) && "offset" in obj && "scaling" in obj && "overrides" in obj);
}
/**
 * Checks if the given object is a PcmPatternEmbossingDefinition.
 * @param obj The object to check.
 * @returns True if the object is a PcmPatternEmbossingDefinition, false otherwise.
 */
export function isPcmPatternEmbossingDefinition(obj) {
    return typeof obj === "object" && obj !== null && "overrides" in obj;
}
/**
 * Gets a list with all available pattern embossings.
 *
 * @param accessToken The access token.
 * @param baseUrl The base url.
 * @returns A list with all available pattern embossings.
 */
export async function getPatternEmbossings(accessToken = getAccessToken(), baseUrl = getPcmBaseUrl()) {
    const items = await _getPcmItems("pattern_embossings", accessToken, baseUrl);
    return items.map(mapNativePcmPatternEmbossingToLibrary);
}
/**
 * Gets an pattern embossing by its id.
 *
 * Using the id is not filtered (e.g., permissions, deprecations, etc.) and may
 * return elements that are not returned by {@link getPatternEmbossings}.
 *
 * @param id The id of the pattern embossing.
 * @param accessToken The access token.
 * @param baseUrl The base url.
 * @returns The pattern embossing with the given id or undefined if no pattern
 *          embossing with the given id exists.
 */
export async function getPatternEmbossingById(id, accessToken = getAccessToken(), baseUrl = getPcmBaseUrl()) {
    const item = await _getPcmItem("pattern_embossings", id, accessToken, baseUrl);
    return item ? mapNativePcmPatternEmbossingToLibrary(item) : undefined;
}
const mapNativePcmPatternEmbossingToLibrary = (patternEmbossing) => ({
    ...mapNativePcmItemToPcmItem(patternEmbossing),
    alias: patternEmbossing.alias,
    thumbnailUrl: patternEmbossing.thumbnailUrl,
    overrides: patternEmbossing.overrides,
});
