import { NativePcmItem, PcmItem } from "./item.js";
/**
 * @interal Embossing configuration that is currently only used internally
 */
export interface PcmEmbossingConfiguration extends PcmItem {
    /**
     * A unique but human-readable alias of the embossing configuration.
     */
    alias?: string;
    /**
     * The url to the embossing configurations's icon.
     */
    iconUrl: string;
    /**
     * Defines if the embossing should read the height values
     * from the texture (custom by brightness)
     *
     * If set to true the 'size' and 'sizeCutoff' will be ignored
     */
    cBr?: boolean;
    /**
     * Displacement amount of the embossing.
     * Larger numbers represent a bigger displacement
     */
    level: number;
    size: number;
    sizeCutoff: number;
    curve: string;
}
/**
 * @internal The embossing configuration how it is returned by the PCM api.
 */
export interface NativePcmEmbossingConfiguration extends NativePcmItem {
    alias?: string;
    iconUrl: string;
    cBr?: boolean;
    level: number;
    size: number;
    sizeCutoff: number;
    curve: string;
}
/**
 * @internal Checks if the given object is a PcmEmbossingConfiguration.
 *
 * @param obj The object to check.
 * @returns True if the object is a PcmEmbossingConfiguration, false otherwise.
 */
export declare function isPcmEmbossingConfiguration(obj: unknown): obj is PcmEmbossingConfiguration;
/**
 * @internal Gets a list with all available embossing configurations.
 *
 * @param accessToken The access token.
 * @param baseUrl The base url.
 * @returns A list with all embossing configurations.
 */
export declare function getEmbossingConfigurations(accessToken?: string | undefined, baseUrl?: string): Promise<PcmEmbossingConfiguration[]>;
/**
 * @internal
 * Gets a embossing configuration by its id.
 *
 * Using the id is not filtered (e.g., permissions, deprecations, etc.) and may
 * return elements that are not returned by {@link getEmbossingConfigurations}.
 *
 * @param id The id of the embossing configuration.
 * @param accessToken The access token.
 * @param baseUrl The base url.
 * @returns The embossing configuration with the given id or undefined if no
 *          embossing configuration with the given id exists.
 */
export declare function getEmbossingConfigurationById(id: string, accessToken?: string | undefined, baseUrl?: string): Promise<PcmEmbossingConfiguration | undefined>;
