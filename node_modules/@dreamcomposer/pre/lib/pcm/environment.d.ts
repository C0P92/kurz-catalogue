import { NativePcmItem, PcmItem } from "./item.js";
export interface PcmEnvironment extends PcmItem {
    /**
     * A unique but human-readable alias of the environment.
     */
    alias?: string;
    /**
     * A url to the environment's file.
     */
    url: string;
    /**
     * The recommended default rotation of the environment.
     */
    defaultRotation: number;
    /**
     * The recommended exposure of the environment.
     */
    exposure: number;
}
/**
 * @internal The environment how it is returned by the PCM api.
 */
export interface NativePcmEnvironment extends NativePcmItem {
    alias?: string;
    filenameHDR: string;
    defaultRotation: number;
    exposureHDR: number;
}
/**
 * Checks if the given object is a PcmEnvironment.
 *
 * @param obj The object to check.
 * @returns True if the object is a PcmEnvironment, false otherwise.
 */
export declare function isPcmEnvironment(obj: unknown): obj is PcmEnvironment;
/**
 * Gets a list with all available environments.
 *
 * @param accessToken The access token.
 * @param baseUrl The base url.
 * @returns A list with all available environments.
 */
export declare function getEnvironments(accessToken?: string | undefined, baseUrl?: string): Promise<PcmEnvironment[]>;
/**
 * Gets an environment by its id.
 *
 * Using the id is not filtered (e.g., permissions, deprecations, etc.) and may
 * return elements that are not returned by {@link getEnvironments}.
 *
 * @param id The id of the environment.
 * @param accessToken The access token.
 * @param baseUrl The base url.
 * @returns The environment with the given id or undefined if no environment
 *          with the given id exists.
 */
export declare function getEnvironmentById(id: string, accessToken?: string | undefined, baseUrl?: string): Promise<PcmEnvironment | undefined>;
