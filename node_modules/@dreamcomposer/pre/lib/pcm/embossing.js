import { getAccessToken } from "../methods/access-token.js";
import { getPcmBaseUrl } from "../methods/base-url.js";
import { isPcmItem, mapNativePcmItemToPcmItem, } from "./item.js";
import { _getPcmItem, _getPcmItems } from "./util.js";
/**
 * @internal Checks if the given object is a PcmEmbossingConfiguration.
 *
 * @param obj The object to check.
 * @returns True if the object is a PcmEmbossingConfiguration, false otherwise.
 */
export function isPcmEmbossingConfiguration(obj) {
    return (isPcmItem(obj) &&
        "iconUrl" in obj &&
        "isCustomByBrightness" in obj &&
        "level" in obj &&
        "size" in obj &&
        "sizeCutoff" in obj &&
        "curve" in obj);
}
/**
 * @internal Gets a list with all available embossing configurations.
 *
 * @param accessToken The access token.
 * @param baseUrl The base url.
 * @returns A list with all embossing configurations.
 */
export async function getEmbossingConfigurations(accessToken = getAccessToken(), baseUrl = getPcmBaseUrl()) {
    const items = await _getPcmItems("embossings", accessToken, baseUrl);
    return items.map(mapNativePcmEmbossingConfigurationToLibrary);
}
/**
 * @internal
 * Gets a embossing configuration by its id.
 *
 * Using the id is not filtered (e.g., permissions, deprecations, etc.) and may
 * return elements that are not returned by {@link getEmbossingConfigurations}.
 *
 * @param id The id of the embossing configuration.
 * @param accessToken The access token.
 * @param baseUrl The base url.
 * @returns The embossing configuration with the given id or undefined if no
 *          embossing configuration with the given id exists.
 */
export async function getEmbossingConfigurationById(id, accessToken = getAccessToken(), baseUrl = getPcmBaseUrl()) {
    const item = await _getPcmItem("embossings", id, accessToken, baseUrl);
    return item ? mapNativePcmEmbossingConfigurationToLibrary(item) : undefined;
}
const mapNativePcmEmbossingConfigurationToLibrary = (embossingConfig) => ({
    ...mapNativePcmItemToPcmItem(embossingConfig),
    alias: embossingConfig.alias,
    iconUrl: embossingConfig.iconUrl,
    cBr: embossingConfig.cBr,
    level: embossingConfig.level,
    size: embossingConfig.size,
    sizeCutoff: embossingConfig.sizeCutoff,
    curve: embossingConfig.curve,
});
