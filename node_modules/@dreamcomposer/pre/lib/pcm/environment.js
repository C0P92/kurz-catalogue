import { getAccessToken } from "../methods/access-token.js";
import { getPcmBaseUrl } from "../methods/base-url.js";
import { isPcmItem, mapNativePcmItemToPcmItem, } from "./item.js";
import { _getPcmItem, _getPcmItems } from "./util.js";
/**
 * Checks if the given object is a PcmEnvironment.
 *
 * @param obj The object to check.
 * @returns True if the object is a PcmEnvironment, false otherwise.
 */
export function isPcmEnvironment(obj) {
    return (isPcmItem(obj) &&
        "alias" in obj &&
        "url" in obj &&
        "defaultRotation" in obj &&
        "exposure" in obj);
}
/**
 * Gets a list with all available environments.
 *
 * @param accessToken The access token.
 * @param baseUrl The base url.
 * @returns A list with all available environments.
 */
export async function getEnvironments(accessToken = getAccessToken(), baseUrl = getPcmBaseUrl()) {
    const items = await _getPcmItems("environments", accessToken, baseUrl);
    return items.map(mapNativePcmEnvironmentToLibrary);
}
/**
 * Gets an environment by its id.
 *
 * Using the id is not filtered (e.g., permissions, deprecations, etc.) and may
 * return elements that are not returned by {@link getEnvironments}.
 *
 * @param id The id of the environment.
 * @param accessToken The access token.
 * @param baseUrl The base url.
 * @returns The environment with the given id or undefined if no environment
 *          with the given id exists.
 */
export async function getEnvironmentById(id, accessToken = getAccessToken(), baseUrl = getPcmBaseUrl()) {
    const item = await _getPcmItem("environments", id, accessToken, baseUrl);
    return item ? mapNativePcmEnvironmentToLibrary(item) : undefined;
}
const mapNativePcmEnvironmentToLibrary = (environment) => ({
    ...mapNativePcmItemToPcmItem(environment),
    alias: environment.alias,
    url: environment.filenameHDR,
    defaultRotation: environment.defaultRotation,
    exposure: environment.exposureHDR,
});
