import { FromEnginePostMessage, ToEnginePostMessage } from "@dreamcomposer/engine-types/post-messages.js";
import { DistributiveOmit } from "./DistributiveOmit.js";
import { ExtendedBaseUrl } from "./methods/base-url.js";
export declare class DcController {
    /**
     * The container div. It contains one div with two children: One for the
     * loading ui and one for the iFrame.
     */
    readonly container: HTMLDivElement;
    /**
     * The container div that contains the loading ui and the iFrame.
     */
    readonly innerContainer: HTMLDivElement;
    /**
     * The container div that embeds the engine.
     */
    readonly iFrameContainer: HTMLDivElement;
    /**
     * The container div that is used for labels ui.
     */
    readonly tagUiContainer: HTMLDivElement;
    /**
     * The container div for the loading ui.
     */
    readonly loadingUiContainer: HTMLDivElement;
    /**
     * The iframe element that is used to embed Dreamcomposer.
     */
    private iframe?;
    /**
     * The base url.
     */
    readonly baseUrl: ExtendedBaseUrl;
    /**
     * The access token.
     */
    readonly accessToken: string;
    /**
     * A unique string to identify this instance.
     */
    readonly id: string;
    /**
     * A renderer for the preview when the engine is not loaded.
     */
    private previewRenderer;
    /**
     * A map that stores messages that should be send to the engine once the
     * iframe has been created.
     */
    private messageQueue;
    /**
     * A promise that resolves once the engine is ready.
     *
     * @internal
     */
    engineReadyPromise: Promise<void>;
    /** The resolve function of the engineReadyPromise */
    private engineReadyResolve?;
    /**
     * Whether or not the engine is ready.
     *
     * @internal
     */
    engineReady: boolean;
    /**
     * A list with externally registered listeners for engine messages.
     *
     * The key is the channel and the value are the listeners that are registered
     * for that channel.
     */
    private listeners;
    /**
     * Event handler for passing mouse events from the embedder to the engine.
     */
    private mouseEventHandler;
    /**
     * A map with the nonce as the key and a function that accepts the ack message
     * for the nonce as the value.
     */
    private waitingForAck;
    /** @internal */
    constructor(container: HTMLDivElement, options: {
        baseUrl: ExtendedBaseUrl;
        accessToken: string;
    });
    /**
     * Creates the iFrame element that is used to embed Dreamcomposer.
     */
    private createIFrame;
    /**
     * Registers an event listener for engine messages.
     */
    private addEventListener;
    /**
     * Calls a listener that was registered with the `on` method.
     */
    private callListener;
    private handleEngineReady;
    private handleAck;
    /**
     * Sets the render function that should be used to render the preview.
     */
    setPreviewRenderer(renderer: (container: HTMLDivElement) => void): void;
    /**
     * Renders the preview if the engine is not loaded and a render function is
     * available.
     */
    renderPreview(): void;
    /**
     * Loads the iFrame if it hasn't been loaded yet.
     *
     * @internal
     */
    load(): Promise<void>;
    /**
     * Loads the iFrame if it hasn't been loaded yet.
     *
     * @internal
     */
    unload(): void;
    /**
     * Checks if the engine is loaded.
     *
     * @returns Whether or not the engine is loaded.
     */
    isLoaded(): boolean;
    /**
     * Listens for messages from the engine.
     *
     * @param channel The channel to listen on.
     * @param callback The listener that gets called when a message on that
     *                 channel is received.
     * @internal
     */
    addListener<Channel extends string>(channel: Channel, callback: (message: FromEnginePostMessage & {
        channel: Channel;
    }) => void): () => void;
    /**
     * Unregisters the given listener that was registered with the `on` method.
     *
     * @param channel The channel that the listener was registered on.
     * @param callback The callback function that was registered.
     * @internal
     */
    removeListener<Channel extends string>(channel: Channel, callback: (message: FromEnginePostMessage & {
        channel: Channel;
    }) => void): void;
    /**
     * Listens for when the engine gets loaded.
     *
     * @internal
     */
    onLoad: (callback: () => void) => (() => void);
    /**
     * Listens for when the engine gets unloaded.
     *
     * @internal
     */
    onUnload: (callback: () => void) => (() => void);
    /**
     * Posts a message to the iframe once the engine is ready.
     *
     * @param message The message without the nonce. The nonce is automatically
     *                added by the controller.
     * @params options Options for the method.
     * @returns A promise that resolves once the message has been acked by the
     *          engine. If something went wrong, the promise is rejected with an
     *          error message.
     * @internal
     */
    postMessage(message: DistributiveOmit<ToEnginePostMessage, "nonce">, options?: {
        /**
         * Whether or the the post message should be memorized or not. The latest
         * version of a memorized post message will be sent to the engine whenever
         * it gets loaded (even if it gets unloaded and then loaded again).
         */
        memorize: boolean;
    }): Promise<void>;
}
